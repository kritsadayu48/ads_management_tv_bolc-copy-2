// services/ad_service.dart
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../config/api_config.dart';
import 'device_service.dart';

class AdService {
  final String baseUrl;
  final DeviceService _deviceService = DeviceService();
  
  // For error handling
  int _consecutiveErrors = 0;
  static const int _maxConsecutiveErrors = 3;
  DateTime? _lastErrorTime;
  static const int _errorCooldownMinutes = 5;
  
  // For caching
  static const String _cacheKey = 'ad_schedules_cache';
  static const Duration _cacheDuration = Duration(minutes: 15);
  DateTime? _lastFetchTime;
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° resync time
  static DateTime? _lastResyncTime;
  
  // Constructor with default API base URL
  AdService({String? baseUrl}) : baseUrl = baseUrl ?? ApiConfig.baseUrl;
  
  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ resync
  static void recordResyncTime() {
    _lastResyncTime = DateTime.now();
    print('üì∫ TV - AdService: Recorded resync time: $_lastResyncTime');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 403 error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á resync ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _is403AfterResync() {
    if (_lastResyncTime == null) return false;
    final timeSinceResync = DateTime.now().difference(_lastResyncTime!);
    return timeSinceResync.inSeconds < 30; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á resync
  }
  
  // Fetch current schedules from API or cache
  Future<List<Map<String, dynamic>>> getCurrentSchedules() async {
    // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏Ñ‡∏ä‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    await clearCache();
    
    // Check if we should use cached data to avoid spamming a failing API
    if (_shouldUseCache()) {
      final cachedData = await _getFromCache();
      if (cachedData.isNotEmpty) {
        print('üì∫ TV - AdService: Using cached schedules');
        return cachedData;
      }
    }
    
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device credentials
      final credentials = await _deviceService.getDeviceCredentials();
      final Map<String, String> headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      };
      
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ access token ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      if (credentials != null && credentials.containsKey('access_token')) {
        headers['Authorization'] = 'Bearer ${credentials['access_token']}';
        print('üì∫ TV - AdService: Using authorization token for API request');
      } else {
        print('üì∫ TV - AdService: No authorization token available');
      }
      
      // ‡πÉ‡∏ä‡πâ URL ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö device ID ‡πÉ‡∏ô‡∏û‡∏≤‡∏ò)
      String apiUrl = '$baseUrl/device/schedules';
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device ID ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ token ‡πÅ‡∏ó‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (credentials != null && credentials.containsKey('device_id')) {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° device_id ‡πÄ‡∏õ‡πá‡∏ô query parameter
        apiUrl = '$apiUrl?device_id=${credentials['device_id']}';
        print('üì∫ TV - AdService: Requesting schedules for device ID: ${credentials['device_id']}');
      }
      
      // Try to fetch fresh data from API
      final response = await http.get(
        Uri.parse(apiUrl),
        headers: headers,
      ).timeout(const Duration(seconds: 10));
      
      if (response.statusCode == 200) {
        // Reset error count on success
        _consecutiveErrors = 0;
        _lastFetchTime = DateTime.now();
        
        // Parse response data
        final data = jsonDecode(response.body);
        print('üì∫ TV - AdService: Response data: $data');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (schedules) ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (message)
        List<dynamic> schedulesJson = [];
        
        if (data.containsKey('schedules')) {
          // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
          schedulesJson = data['schedules'] ?? [];
          print('üì∫ TV - AdService: ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (schedules)');
        } else if (data.containsKey('message') && data['message'] is List) {
          // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
          schedulesJson = data['message'] ?? [];
          print('üì∫ TV - AdService: ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (message)');
        } else {
          print('üì∫ TV - AdService: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö');
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        print('üì∫ TV - AdService: Schedules JSON: $schedulesJson');
        
        final List<Map<String, dynamic>> schedules = schedulesJson
            .cast<Map<String, dynamic>>()
            .where((schedule) => _isScheduleValid(schedule))
            .toList();
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        print('üì∫ TV - AdService: Valid schedules: $schedules');
        
        // Cache this data
        await _saveToCache(schedules);
        
        return schedules;
      } else if (response.statusCode == 401) {
        // ‡∏Å‡∏£‡∏ì‡∏µ Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (401 Unauthorized)
        final responseBody = response.body;
        
        print('üì∫ TV - AdService: API error 401: $responseBody');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (responseBody.contains('expired') || 
            responseBody.contains('Unauthenticated') || 
            responseBody.contains('Token has expired')) {
          
          print('üì∫ TV - AdService: Token has expired, attempting to refresh...');
          
          // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh token ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          return await _refreshAndRetry();
        } else {
          // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
          _handleApiError();
          return await _getFromCache(); // Fall back to cache
        }
      } else if (response.statusCode == 403) {
        // ‡∏Å‡∏£‡∏ì‡∏µ Forbidden (403) - ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡∏Å‡∏ñ‡∏≠‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å revoke
        print('üì∫ TV - AdService: API error 403: ${response.body}');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 403 error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á resync ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (_is403AfterResync()) {
          print('üì∫ TV - AdService: 403 error occurred shortly after resync, waiting 5 seconds before retry...');
          
          // ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          await Future.delayed(const Duration(seconds: 5));
          
          print('üì∫ TV - AdService: Retrying API call after 403 error...');
          
          // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          try {
            final retryResponse = await http.get(
              Uri.parse(apiUrl),
              headers: headers,
            ).timeout(const Duration(seconds: 10));
            
            if (retryResponse.statusCode == 200) {
              print('üì∫ TV - AdService: Retry successful after 403 error');
              
              // Reset error count on success
              _consecutiveErrors = 0;
              _lastFetchTime = DateTime.now();
              
              final data = jsonDecode(retryResponse.body);
              
              // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å
              List<dynamic> schedulesJson = [];
              if (data.containsKey('schedules')) {
                schedulesJson = data['schedules'] ?? [];
              } else if (data.containsKey('message') && data['message'] is List) {
                schedulesJson = data['message'] ?? [];
              }
              
              final List<Map<String, dynamic>> schedules = schedulesJson
                  .cast<Map<String, dynamic>>()
                  .where((schedule) => _isScheduleValid(schedule))
                  .toList();
              
              // Cache this data
              await _saveToCache(schedules);
              
              return schedules;
            } else {
              print('üì∫ TV - AdService: Retry failed with status: ${retryResponse.statusCode}');
            }
          } catch (retryError) {
            print('üì∫ TV - AdService: Retry attempt failed: $retryError');
          }
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏•‡∏±‡∏á resync ‡∏´‡∏£‡∏∑‡∏≠ retry ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì device_revoked
        throw Exception('device_revoked');
      } else {
        // Handle other API errors
        print('üì∫ TV - AdService: API error ${response.statusCode}: ${response.body}');
        _handleApiError();
        return await _getFromCache(); // Fall back to cache
      }
    } on TimeoutException {
      print('üì∫ TV - AdService: API request timed out');
      _handleApiError();
      return await _getFromCache();
    } on SocketException {
      print('üì∫ TV - AdService: No internet connection');
      _handleApiError();
      return await _getFromCache();
    } catch (e) {
      print('üì∫ TV - AdService: Error fetching schedules: $e');
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô device_revoked exception ‡πÉ‡∏´‡πâ throw ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      if (e.toString().contains('device_revoked')) {
        print('üì∫ TV - AdService: Re-throwing device_revoked exception');
        rethrow;
      }
      
      _handleApiError();
      return await _getFromCache();
    }
  }
  
  // Validate a schedule has minimum required fields
  bool _isScheduleValid(Map<String, dynamic> schedule) {
    // Check if it has a URL
    final url = schedule['url']?.toString() ?? '';
    if (url.isEmpty) {
      return false;
    }
    
    // Validate dates if present
    if (schedule['start_date'] != null || schedule['end_date'] != null) {
      try {
        // If start date is specified, check if it's in the future
        if (schedule['start_date'] != null) {
          final startDate = DateTime.parse(schedule['start_date'].toString());
          if (DateTime.now().isBefore(startDate)) {
            return false; // Schedule not yet active
          }
        }
        
        // If end date is specified, check if it's in the past
        if (schedule['end_date'] != null) {
          final endDate = DateTime.parse(schedule['end_date'].toString());
          if (DateTime.now().isAfter(endDate)) {
            return false; // Schedule expired
          }
        }
      } catch (e) {
        print('üì∫ TV - AdService: Error validating schedule dates: $e');
        return false;
      }
    }
    
    return true;
  }
  
  // Handle API errors with exponential backoff
  void _handleApiError() {
    _consecutiveErrors++;
    _lastErrorTime = DateTime.now();
    print('üì∫ TV - AdService: Consecutive errors: $_consecutiveErrors');
  }
  
  // Determine if we should use cache based on error history
  bool _shouldUseCache() {
    // Always check cache first
    if (_lastFetchTime == null) {
      return true; // No fetch yet, try cache
    }
    
    // If cache is recent enough, use it first
    if (DateTime.now().difference(_lastFetchTime!) < _cacheDuration) {
      return true;
    }
    
    // If we've had too many errors, back off for a while
    if (_consecutiveErrors >= _maxConsecutiveErrors && 
        _lastErrorTime != null &&
        DateTime.now().difference(_lastErrorTime!).inMinutes < _errorCooldownMinutes) {
      return true;
    }
    
    return false;
  }
  
  // Get cached schedules
  Future<List<Map<String, dynamic>>> _getFromCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString(_cacheKey);
      
      if (jsonString != null) {
        final List<dynamic> decodedData = jsonDecode(jsonString);
        return decodedData.cast<Map<String, dynamic>>();
      }
      
      return [];
    } catch (e) {
      print('üì∫ TV - AdService: Error reading from cache: $e');
      return [];
    }
  }
  
  // Save schedules to cache
  Future<void> _saveToCache(List<Map<String, dynamic>> schedules) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = jsonEncode(schedules);
      await prefs.setString(_cacheKey, jsonString);
    } catch (e) {
      print('üì∫ TV - AdService: Error saving to cache: $e');
    }
  }
  
  // Clear the cache
  Future<void> clearCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_cacheKey);
      print('üì∫ TV - AdService: Cache cleared');
    } catch (e) {
      print('üì∫ TV - AdService: Error clearing cache: $e');
    }
  }
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh token ‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  Future<List<Map<String, dynamic>>> _refreshAndRetry() async {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ refresh token
      final refreshResult = await _deviceService.refreshToken();
      
      if (refreshResult['success'] == true) {
        print('üì∫ TV - AdService: Token refreshed successfully, retrying API call');
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials ‡πÉ‡∏´‡∏°‡πà
        final credentials = await _deviceService.getDeviceCredentials();
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á headers ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° token ‡∏ó‡∏µ‡πà refresh ‡πÅ‡∏•‡πâ‡∏ß
        final Map<String, String> headers = {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        };
        
        if (credentials != null && credentials.containsKey('access_token')) {
          headers['Authorization'] = 'Bearer ${credentials['access_token']}';
        }
        
        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° URL
        String apiUrl = '$baseUrl/device/schedules';
        if (credentials != null && credentials.containsKey('device_id')) {
          apiUrl = '$apiUrl?device_id=${credentials['device_id']}';
        }
        
        // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ token ‡πÉ‡∏´‡∏°‡πà
        final response = await http.get(
          Uri.parse(apiUrl),
          headers: headers,
        ).timeout(const Duration(seconds: 10));
        
        if (response.statusCode == 200) {
          // Reset error count on success
          _consecutiveErrors = 0;
          _lastFetchTime = DateTime.now();
          
          final data = jsonDecode(response.body);
          
          // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å
          List<dynamic> schedulesJson = [];
          if (data.containsKey('schedules')) {
            schedulesJson = data['schedules'] ?? [];
          } else if (data.containsKey('message') && data['message'] is List) {
            schedulesJson = data['message'] ?? [];
          }
          
          final List<Map<String, dynamic>> schedules = schedulesJson
              .cast<Map<String, dynamic>>()
              .where((schedule) => _isScheduleValid(schedule))
              .toList();
          
          // Cache this data
          await _saveToCache(schedules);
          
          return schedules;
        } else if (response.statusCode == 403) {
          // ‡∏Å‡∏£‡∏ì‡∏µ Forbidden (403) - ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡∏Å‡∏ñ‡∏≠‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å revoke ‡πÅ‡∏°‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å refresh token
          print('üì∫ TV - AdService: API retry failed with 403: ${response.body}');
          
          // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ QR code (‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
          await _deviceService.clearCredentials();
          
          // ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ QR code
          throw Exception('device_revoked');
        } else {
          print('üì∫ TV - AdService: API retry failed with status: ${response.statusCode}');
          _handleApiError();
          return await _getFromCache();
        }
      } else {
        // Refresh token ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á re-pair ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        final message = refreshResult['message']?.toString().toLowerCase() ?? '';
        print('üì∫ TV - AdService: Failed to refresh token: ${refreshResult['message']}');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á re-pair ‡∏´‡∏£‡∏∑‡∏≠ resync
        if (message.contains('re-pair') || 
            message.contains('resync') || 
            message.contains('token is invalid') ||
            message.contains('token_invalid') ||
            message.contains('please re-pair')) {
          
          print('üì∫ TV - AdService: Token refresh indicates re-pairing is needed');
          
          // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ QR code
          await _deviceService.clearCredentials();
          
          // ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å re-pair
          throw Exception('device_revoked');
        }
        
        _handleApiError();
        return await _getFromCache();
      }
    } catch (e) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô device_revoked exception ‡πÉ‡∏´‡πâ throw ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      if (e.toString().contains('device_revoked')) {
        print('üì∫ TV - AdService: Re-throwing device_revoked exception from refresh and retry');
        rethrow;
      }
      
      print('üì∫ TV - AdService: Error during token refresh and retry: $e');
      _handleApiError();
      return await _getFromCache();
    }
  }
} 