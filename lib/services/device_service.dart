import 'dart:convert';
import 'dart:io';
import 'dart:math';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/io_client.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'base_service.dart';

class DeviceService {
  static const String _baseUrl = 'https://advert.softacular.net/api';
  static const String _clientIdKey = 'tv_device_client_id';
  static const String _deviceCredentialsKey = 'tv_device_credentials';
  
  final BaseService _baseService = BaseService();
  
  // Generate a unique client ID based on TV properties
  Future<String> getUniqueClientId() async {
    final prefs = await SharedPreferences.getInstance();
    
    // Check if we already have a stored client ID
    String? storedClientId = prefs.getString(_clientIdKey);
    if (storedClientId != null && storedClientId.isNotEmpty) {
      return storedClientId;
    }

    // Generate new client ID
    String clientId = await _generateUniqueClientId();
    
    // Store for future use
    await prefs.setString(_clientIdKey, clientId);
    
    return clientId;
  }

  // Generate a unique ID for the TV
  Future<String> _generateUniqueClientId() async {
    final deviceInfo = DeviceInfoPlugin();
    String deviceId = '';
    
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      if (Platform.isAndroid) {
        final androidInfo = await deviceInfo.androidInfo;
        // ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞ Android ID ‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
        deviceId = '${androidInfo.brand} ${androidInfo.model}_${androidInfo.id}';
        print('üì∫ TV - Android device: ${androidInfo.brand} ${androidInfo.model}');
        print('üì∫ TV - Android ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${androidInfo.id}');
        print('üì∫ TV - ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô Client ID: $deviceId');
      } else if (Platform.isIOS) {
        final iosInfo = await deviceInfo.iosInfo;
        deviceId = '${iosInfo.model}_${iosInfo.identifierForVendor}';
        print('üì∫ TV - iOS device: ${iosInfo.model}');
        print('üì∫ TV - iOS ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${iosInfo.identifierForVendor}');
        print('üì∫ TV - ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô Client ID: $deviceId');
      } else if (Platform.isMacOS) {
        final macOSInfo = await deviceInfo.macOsInfo;
        deviceId = '${macOSInfo.model}_${macOSInfo.systemGUID}';
        print('üì∫ TV - macOS device: ${macOSInfo.model}');
        print('üì∫ TV - macOS ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${macOSInfo.systemGUID}');
        print('üì∫ TV - ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô Client ID: $deviceId');
      } else if (Platform.isLinux) {
        final linuxInfo = await deviceInfo.linuxInfo;
        deviceId = '${linuxInfo.prettyName ?? "Linux"}_${linuxInfo.machineId}';
        print('üì∫ TV - Linux device: ${linuxInfo.prettyName}');
        print('üì∫ TV - Linux ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${linuxInfo.machineId}');
        print('üì∫ TV - ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô Client ID: $deviceId');
      } else if (Platform.isWindows) {
        final windowsInfo = await deviceInfo.windowsInfo;
        deviceId = '${windowsInfo.computerName}_${windowsInfo.deviceId}';
        print('üì∫ TV - Windows device: ${windowsInfo.computerName}');
        print('üì∫ TV - Windows ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${windowsInfo.deviceId}');
        print('üì∫ TV - ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô Client ID: $deviceId');
      }
    } catch (e) {
      print('üì∫ TV - Error getting device info: $e');
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if (deviceId.isEmpty) {
      print('üì∫ TV - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
      deviceId = 'Unknown Device ${DateTime.now().millisecondsSinceEpoch}';
    }
    
    print('üì∫ TV - Generated Client ID: $deviceId');
    return deviceId;
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏∏‡πà‡∏°
  String _generateRandomString(int length) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    final random = Random();
    return String.fromCharCodes(
      List.generate(length, (index) => chars.codeUnitAt(random.nextInt(chars.length)))
    );
  }

  // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡∏ß‡∏µ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
  Future<Map<String, dynamic>> announceDevice() async {
    try {
      String clientId = await getUniqueClientId();
      
      print('\n==================================================');
      print('üì∫ TV - Announcing device with client_id: $clientId');
      
      try {
        final responseData = await _baseService.post(
          'pairing/announce',
          {'client_id': clientId}
        );
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        print('üì∫ TV - ==================== ANNOUNCE RESPONSE DATA ====================');
        responseData.forEach((key, value) {
          print('üì∫ TV - $key: $value');
        });
        print('üì∫ TV - =============================================================');
        print('==================================================\n');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
        return {
          'success': true,
          'message': responseData['message'] ?? '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
          'pairing_code_expires_in_seconds': responseData['pairing_code_expires_in_seconds'] ?? 900,
        };
      } catch (e) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        print('üì∫ TV - Error: $e');
        return {
          'success': false,
          'error': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: $e',
        };
      }
    } catch (e) {
      print('üì∫ TV - Error announcing device: $e');
      return {
        'success': false,
        'error': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.toString()}',
      };
    }
  }
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á (credentials) ‡∏•‡∏á‡πÉ‡∏ô SharedPreferences
  Future<bool> saveDeviceCredentials(Map<String, dynamic> credentials) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String credentialsJson = json.encode(credentials);
      await prefs.setString(_deviceCredentialsKey, credentialsJson);
      print('üì∫ TV - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device_credentials ‡∏•‡∏á‡πÉ‡∏ô SharedPreferences');
      
      if (credentials.containsKey('device_id')) {
        print('üì∫ TV - üÜî [SAVED DEVICE ID] = ${credentials['device_id']}');
      }
      
      return true;
    } catch (e) {
      print('üì∫ TV - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials: $e');
      return false;
    }
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á (credentials) ‡∏à‡∏≤‡∏Å SharedPreferences
  Future<Map<String, dynamic>?> getDeviceCredentials() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? credentialsJson = prefs.getString(_deviceCredentialsKey);
      
      if (credentialsJson != null && credentialsJson.isNotEmpty) {
        final credentials = json.decode(credentialsJson) as Map<String, dynamic>;
        if (credentials.containsKey('device_id')) {
          print('üì∫ TV - üÜî [GET DEVICE ID] = ${credentials['device_id']}');
        }
        return credentials;
      }
      return null;
    } catch (e) {
      print('üì∫ TV - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials: $e');
      return null;
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> hasStoredCredentials() async {
    final credentials = await getDeviceCredentials();
    return credentials != null && 
           credentials.containsKey('device_id') && 
           credentials.containsKey('access_token');
  }
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
  Future<bool> clearCredentials() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_deviceCredentialsKey);
      print('üì∫ TV - ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (e) {
      print('üì∫ TV - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials: $e');
      return false;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
  Future<Map<String, dynamic>> checkPairingStatus({String? clientId}) async {
    try {
      String deviceId = clientId ?? await getUniqueClientId();
      
      print('Checking pairing status for client_id: $deviceId');
      
      try {
        final responseData = await _baseService.get('pairing/status/$deviceId');

        print('==================== STATUS RESPONSE DATA ====================');
        responseData.forEach((key, value) {
          print('$key: $value');
        });
        print('============================================================');
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device_credentials ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        if (responseData.containsKey('device_credentials')) {
          if (responseData['device_credentials'] is Map && 
              responseData['device_credentials'].containsKey('device_id')) {
            print('üì∫ TV - ‚≠ê [NEW DEVICE ID RECEIVED] = ${responseData['device_credentials']['device_id']}');
          }
          await saveDeviceCredentials(responseData['device_credentials']);
        }
        
        return {
          'status': responseData['status'] ?? 'unknown',
          'success': true,
          'message': responseData['message'],
          'device_credentials': responseData['device_credentials'],
        };
      } catch (e) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        return {
          'error': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: $e',
          'status': 'error',
          'success': false,
        };
      }
    } catch (e) {
      print('Error checking pairing status: $e');
      return {
        'error': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.toString()}',
        'status': 'error',
        'success': false,
      };
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<Map<String, dynamic>> checkDeviceStatus() async {
    try {
      String clientId = await getUniqueClientId();
      
      print('Checking device status for client_id: $clientId');
      
      try {
        final responseData = await _baseService.get('devices/status/$clientId');

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        return {
          'success': true,
          'is_paired': responseData['is_paired'] ?? false,
          'device_name': responseData['device_name'],
          'device_id': responseData['device_id'],
          'message': responseData['message'] ?? '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        };
      } catch (e) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
        return {
          'success': false,
          'is_paired': false,
          'message': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ ($e)',
        };
      }
    } catch (e) {
      print('Error checking device status: $e');
      return {
        'success': false,
        'is_paired': false,
        'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: $e',
      };
    }
  }

  // ‡∏•‡πâ‡∏≤‡∏á client ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
  Future<bool> clearClientId() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_clientIdKey);
      print('üì∫ TV - ‡∏•‡πâ‡∏≤‡∏á client ID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (e) {
      print('üì∫ TV - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á client ID: $e');
      return false;
    }
  }

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ refresh token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ access token ‡πÉ‡∏´‡∏°‡πà
  Future<Map<String, dynamic>> refreshToken() async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials ‡πÄ‡∏î‡∏¥‡∏°
      final credentials = await getDeviceCredentials();
      if (credentials == null || !credentials.containsKey('access_token')) {
        print('üì∫ TV - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ refresh');
        return {
          'success': false,
          'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token',
        };
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP client ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SSL certificate
      final client = _baseService.createUnsecureClient();
      String refreshUrl = '$_baseUrl/device/token/refresh';
      
      print('üì∫ TV - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh token API: $refreshUrl');
      
      try {
        // ‡πÉ‡∏ä‡πâ access token ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh
        final response = await client.post(
          Uri.parse(refreshUrl),
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': 'Bearer ${credentials['access_token']}',
          },
          body: json.encode({
            'device_id': credentials['device_id'],
          }),
        ).timeout(const Duration(seconds: 15));
        
        // ‡∏õ‡∏¥‡∏î HTTP client
        client.close();
        
        print('ÔøΩÔøΩ TV - Refresh token response status: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          final responseData = json.decode(response.body);
          print('ÔøΩÔøΩ TV - Refresh token successful: ${responseData['message'] ?? "Token refreshed"}');
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ token ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (responseData.containsKey('access_token')) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á credentials ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏≤‡∏Å credentials ‡πÄ‡∏î‡∏¥‡∏°
            final newCredentials = Map<String, dynamic>.from(credentials);
            newCredentials['access_token'] = responseData['access_token'];
            
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ refresh_token ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢
            if (responseData.containsKey('refresh_token')) {
              newCredentials['refresh_token'] = responseData['refresh_token'];
            }
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å credentials ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
            await saveDeviceCredentials(newCredentials);
            
            return {
              'success': true,
              'access_token': responseData['access_token'],
              'message': '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            };
          } else {
            print('üì∫ TV - ‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö');
            return {
              'success': false,
              'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö',
            };
          }
        } else {
          print('üì∫ TV - Refresh token failed with status: ${response.statusCode}');
          print('üì∫ TV - Response body: ${response.body}');
          
          return {
            'success': false,
            'message': '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ token ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: HTTP ${response.statusCode}',
          };
        }
      } catch (e) {
        print('üì∫ TV - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh token API: $e');
        return {
          'success': false,
          'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh token: $e',
        };
      }
    } catch (e) {
      print('üì∫ TV - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ refresh token: $e');
      return {
        'success': false,
        'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ refresh token: $e',
      };
    }
  }
} 